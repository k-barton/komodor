{
  "keyboard_shortcut": "", 
  "name": "HTML Error Log", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/* globals ko, Cc, Ci, Array */", 
    "", 
    "window.errorlogView = {};", 
    "(function() {", 
    "    ", 
    "    var intervalId = -1;", 
    "    //var taillog = ko.logging.getLogger('tail');", 
    "    var fu = require(\"kor/fileutils\");", 
    "    var fileName, fileSize = 0, xwin, tempfile;", 
    "    ", 
    "    var _this = this;", 
    "    this.view = xwin;", 
    "", 
    "    ", 
    "    var readFile = (filename, position, endpos) => {", 
    "        var file = fu.getLocalFile(filename);", 
    "        if(file.fileSizeOfLink <= position) return \"\"; ", 
    "        var fis = Cc[\"@mozilla.org/network/file-input-stream;1\"].createInstance(Ci.nsIFileInputStream);", 
    "        var sis = Cc[\"@mozilla.org/scriptableinputstream;1\"].createInstance(Ci.nsIScriptableInputStream);", 
    "        fis.init(file, 1, 0, false);", 
    "        sis.init(fis);", 
    "        var rval = \"\";", 
    "        try {", 
    "            fis.seek(fis.NS_SEEK_SET, position);", 
    "            while (sis.available() > 0) rval += sis.read(-1);", 
    "        } finally {", 
    "            if (typeof endpos === \"object\")", 
    "                endpos.value = fis.tell();", 
    "            sis.close();", 
    "            fis.close();", 
    "        }", 
    "        return rval;", 
    "    };", 
    "    ", 
    "    var onEvtTypeFilterApply = function(event) {", 
    "        if (!xwin) return;", 
    "        var doc = xwin._browser.docShell.document;", 
    "        let show = event.target.checked;", 
    "        let type = event.target.value;", 
    "        let ss = doc.styleSheets[0];", 
    "        let rule = Array.from(ss.cssRules).find(x=> x.selectorText == \".type-\" + type);", 
    "        if (!rule) {", 
    "            let cssRule = \".type-\" + type + \"{display: \" + (show ? \"\" : \"none\") + \"}\";", 
    "            ss.insertRule(cssRule.cssRules.length);", 
    "        } else {", 
    "            rule.style.display = show ? \"\" : \"none\";", 
    "        }", 
    "    };", 
    "    ", 
    "    var addEvtTypeFilter = function(name) {", 
    "        if (!xwin) return;", 
    "        var doc = xwin._browser.docShell.document;", 
    "        var list = doc.getElementById(\"typeFilterBox\");", 
    "        let found = Array.from(list.getElementsByTagName(\"input\")).findIndex(x=> x.value === name);", 
    "        if (found === -1) {", 
    "            let el = doc.createElement(\"input\");", 
    "            el.type = \"checkbox\";", 
    "            el.value = name;", 
    "            el.id = \"typefilter-\" + name;", 
    "            el.checked = true;", 
    "            el.onchange = onEvtTypeFilterApply;", 
    "            list.appendChild(el);", 
    "            let lab = doc.createElement(\"label\");", 
    "            lab.setAttribute(\"for\", el.id);", 
    "            lab.textContent = name;", 
    "            list.appendChild(lab);", 
    "        }", 
    "    };", 
    "    ", 
    "    ", 
    "    var addEvtIdFilter = function(name) {", 
    "        if (!xwin) return;", 
    "        var doc = xwin._browser.docShell.document;", 
    "        var list = doc.getElementById(\"idFilter\");", 
    "        var found = Array.from(list.children).findIndex(x => x.getAttribute(\"value\") === name);", 
    "        if (found === -1) {", 
    "            let newopt = doc.createElement(\"option\");", 
    "            newopt.setAttribute(\"value\", name);", 
    "            newopt.textContent = name;", 
    "            list.add(newopt);", 
    "        }", 
    "    };", 
    "    ", 
    "    var onFilterApply = function(event) {", 
    "        if (!xwin) return;", 
    "        var doc = xwin._browser.docShell.document;", 
    "        var value = doc.getElementById(\"idFilter\").value;", 
    "        var ss = doc.styleSheets[0];", 
    "        var idx = Array.from(ss.cssRules).findIndex(x=>x.selectorText.search(/^\\.logEntry:not\\(\\[class~=\"[^\"]+\"\\]\\)$/) == 0);", 
    "        if(idx != -1) ss.deleteRule(idx);", 
    "        if (!value) return;", 
    "        let cssRule = \".logEntry:not([class~=\\\"id-\" + value + \"\\\"]) { display: none;}\";", 
    "        ss.insertRule(cssRule, ss.cssRules.length);", 
    "    };", 
    "    ", 
    "    var rxUrl = /\\b((?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)[-A-Z0-9+&@#/%=~_|$?!:,.]*[A-Z0-9+&@#\\/%=~_|$])/gi;", 
    "    var createLogItemsHTML = function (inFile, startAt = 0, endpos = {}) {", 
    "        let s = readFile(inFile, startAt, endpos);", 
    "        if (s === \"\") return s;", 
    "", 
    "        //let rx = /^\\[(\\d{4}-\\d+-\\d+ \\d+:\\d+:\\d+,\\d+)\\] \\[([a-zA-Z]+)\\]/m;", 
    "        let rx = /^(?:\\[(\\d{4}-\\d+-\\d+ \\d+:\\d+:\\d+,\\d+)\\] \\[([a-zA-Z]+)\\]|(ERROR):) *([^:]+): */m;", 
    "        let entrypos, entryposNext, m, entryContent;    ", 
    "        let html = \"\";", 
    "        entrypos = s.search(rx); //entrypos = 0;", 
    "        while (entrypos !== -1 && entrypos < s.length) {", 
    "            m = s.match(rx);", 
    "            s = s.substr(entrypos + m[0].length);", 
    "            if ((entryposNext = s.search(rx)) === -1) entryposNext = s.length;", 
    "            entryContent = s.substring(0, entryposNext).trim();", 
    "            entryContent = entryContent.replace(rxUrl, \"<a href=\\\"$1\\\">$1</a>\");", 
    "            let logDate = m[1] || \"no timestamp\";", 
    "            let logType = (m[2] || m[3]).toLowerCase();", 
    "            let logId = m[4];", 
    "            //entryContent =  entryContent.substr(pos + 2);", 
    "            html += `", 
    "<div class=\"logEntry type-${logType} id-${logId}\">", 
    "    <div class=\"logEntryHead\">", 
    "        <div class=\"logType\">${logType}</div>", 
    "        <div class=\"logId\">${logId}</div>", 
    "        <div class=\"logDate\">${logDate}</div>", 
    "    </div>", 
    "    <pre class=\"logEntryContent\">${entryContent.replace(/\\n/g, \"<br/>\")}</pre>", 
    "</div>\\n`;", 
    "            addEvtIdFilter(logId);", 
    "            addEvtTypeFilter(logType);", 
    "            entrypos = entryposNext;", 
    "        }", 
    "        return html;", 
    "    };", 
    "    ", 
    "    this.appendLog = function () {", 
    "", 
    "        if (!xwin) return;", 
    "        var doc = xwin._browser.docShell.document;", 
    "        let content = doc.getElementById(\"logContent\");", 
    "        if (!content) return;", 
    "        ", 
    "        var endpos = {};", 
    "        var s = createLogItemsHTML(fileName, fileSize, endpos);", 
    "        //alert([\"appendLog\", fileSize, endpos.value);", 
    "        if (s.length === 0) return;", 
    "", 
    "        content.insertAdjacentHTML(\"beforeend\", s);", 
    "", 
    "        xwin._browser.contentWindow.scrollTo(0, doc.body.scrollHeight);", 
    "        fileSize = endpos.value;", 
    "", 
    "    };", 
    "", 
    "var onViewClosed = function (event) {", 
    "    if (intervalId !== -1) window.clearInterval(intervalId);", 
    "    if (tempfile) {", 
    "        let fi = fu.getLocalFile(tempfile);", 
    "        try {", 
    "        if (fi.exists()) fi.remove(false);", 
    "        } catch(e) {", 
    "            alert(\"onViewClosed:\" + e);", 
    "        }", 
    "    }", 
    "};", 
    "", 
    "", 
    "var onDocumentLoaded = function _docOnLoad() {", 
    "    let doc = xwin._browser.contentDocument;", 
    "    let el = doc.getElementById(\"logContent\");", 
    "    if (!el) {", 
    "        setTimeout(_docOnLoad, 200);", 
    "        return;", 
    "    }", 
    "    doc.getElementById(\"idFilter\").onchange = onFilterApply;", 
    "    intervalId = setInterval(_this.appendLog.bind(_this), 1000);", 
    "};", 
    "", 
    "", 
    "var onBrowserOpen = function (view) {", 
    "    _this.view = xwin = view;", 
    "    fileName = Cc['@activestate.com/koOs;1'].getService(Ci.koIOs)", 
    "        .path.join(Cc['@activestate.com/koDirs;1'].getService(Ci.koIDirs)", 
    "            .userDataDir, 'pystderr.log');", 
    "    ", 
    "    tempfile = fu.temp(\"errorlog\");", 
    "var html = `<html><meta charset=\"UTF-8\"><head><title>Komodo Error Log</title><style type=\"text/css\">", 
    "body { padding-top: 35px; }", 
    ".topbar {", 
    "    font-family: sans-serif; font-size: small;", 
    "    position: fixed; width: 100%; top: 0px; left: 0px; background: white;", 
    "    border-bottom: 1px black solid; margin: 0;   box-shadow: 0px 5px 5px rgba(0,0,0,0.7);", 
    "", 
    "}", 
    ".topbar >*  { display: inline-block; padding: 1px 3px; border: 1px black solid; border-top: none; border-bottom: none; min-height: 25px; }", 
    ".logEntry {font-family: monospace; }", 
    ".logType {font-weight: bold; background-color: #ccccff; border-radius: 3px; padding: 2px;}", 
    ".logEntryHead >* {display: inline-block;}", 
    ".logDate { font-size: small; }", 
    ".logId { background-color: #ffccaa; border-radius: 3px; padding: 2px;}", 
    ".type-warning {}", 
    ".type-error{ color:red; }", 
    ".type-info{ color: gray; }", 
    ".type-debug{ color: gray; }", 
    "</style>", 
    "</head>", 
    "<body>", 
    "<div class=\"topbar\">", 
    "<div id=\"typeFilterBox\">Filter type:</div>", 
    "<div id=\"idFilterBox\">Filter source: <select id=\"idFilter\" onchange=\"self.onFilterApply(this.value)\"><option value=\"\">Show all</select></div></div>", 
    "<div id=\"logContent\"></div>", 
    "</body></html>`;", 
    "    fu.write(tempfile, html, \"utf-8\", false);", 
    "    var doc = xwin._browser.docShell.document;", 
    "    _this.location = fu.toFileURI(tempfile);", 
    "    xwin._browser.webNavigation.loadURI(_this.location, 0, null, null, null);", 
    "    setTimeout(onDocumentLoaded, 200);", 
    "    xwin.addEventListener('view_closed', onViewClosed, false);", 
    "};", 
    "", 
    "ko.views.manager.openViewAsync(\"browser\", \"about:blank\", null, null, onBrowserOpen);", 
    "", 
    "   ", 
    "}).apply(window.errorlogView);", 
    ""
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "0.3.12", 
  "async": false, 
  "type": "macro", 
  "icon": "koicon://ko-svg/chrome/icomoon/skin/warning2.svg"
}